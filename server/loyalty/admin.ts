import { Telegraf, Markup, Context } from 'telegraf';
import { addStamp, adjustStamp, getCardByTgId, upsertUser } from './service';
import { cardMessage } from './ui';

function isAdmin(ctx: Context) {
  const ids = (process.env.ADMIN_IDS || '').split(',').map(s => s.trim()).filter(Boolean).map(Number);
  return !!ctx.from && ids.includes(ctx.from.id);
}

export function setupAdmin(bot: Telegraf) {
  bot.command('admin', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.reply('–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.');
    return ctx.reply('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', Markup.inlineKeyboard([
      [Markup.button.callback('–ù–∞—á–∏—Å–ª–∏—Ç—å —à—Ç–∞–º–ø', 'ad:add')],
      [Markup.button.callback('–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞', 'ad:adjust')]
    ]));
  });

  // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —à—Ç–∞–º–ø–∞: –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å @username –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.action('ad:add', async (ctx) => {
    if (!isAdmin(ctx)) return;
    await ctx.answerCbQuery();
    await ctx.reply('–ü—Ä–∏—à–ª–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ). –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `+pizza` –∏–ª–∏ `+coffee`.');
    (ctx as any).session = { mode: 'add' };
  });

  // –£–ø—Ä–æ—â–∞–µ–º: –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
  bot.hears(/^\/add_pizza\s+(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    const tgId = Number(ctx.match[1]);
    try {
      const data = await addStamp(tgId, 'pizza', ctx.from!.id);
      await ctx.reply(renderCardForAdmin(data));
    } catch (error) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  });

  bot.hears(/^\/add_coffee\s+(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    const tgId = Number(ctx.match[1]);
    try {
      const data = await addStamp(tgId, 'coffee', ctx.from!.id);
      await ctx.reply(renderCardForAdmin(data));
    } catch (error) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  });

  // –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä—è–º–æ –ø–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  bot.action(/manage:(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    const tgId = Number(ctx.match[1]);
    const data = await getCardByTgId(tgId);
    if (!data) return ctx.answerCbQuery('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    await ctx.editMessageText(renderCardForAdmin(data), {
      parse_mode: 'Markdown',
      reply_markup: Markup.inlineKeyboard([
        [
          Markup.button.callback('üçï +1', `inc:pizza:${tgId}`),
          Markup.button.callback('‚òïÔ∏è +1', `inc:coffee:${tgId}`)
        ]
      ])
    });
  });

  bot.action(/inc:(pizza|coffee):(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return;
    const kind = ctx.match[1] as 'pizza'|'coffee';
    const tgId = Number(ctx.match[2]);
    try {
      const data = await addStamp(tgId, kind, ctx.from!.id);
      await ctx.editMessageText(renderCardForAdmin(data), {
        parse_mode: 'Markdown',
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback('üçï +1', `inc:pizza:${tgId}`),
            Markup.button.callback('‚òïÔ∏è +1', `inc:coffee:${tgId}`)
          ]
        ])
      });
      await ctx.answerCbQuery(kind === 'pizza' ? '–ù–∞—á–∏—Å–ª–µ–Ω–∞ 1 –ø–∏—Ü—Ü–∞' : '–ù–∞—á–∏—Å–ª–µ–Ω 1 –∫–æ—Ñ–µ');
    } catch (error) {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è');
    }
  });
}

function renderCardForAdmin(d: ReturnType<typeof getCardByTgId> & any) {
  const u = d.user;
  const c = d.card;
  const name = [u.first_name, u.last_name].filter(Boolean).join(' ') || u.username || `user_${u.tg_id}`;
  return cardMessage(name, c.pizza_count, c.coffee_count, c.pizza_cycles, c.coffee_cycles);
}
