import React from 'react';
import { useCart } from '../store/cartContext';
import CurvedSection from '../components/CurvedSection';

export const CartPage: React.FC = () => {
  const { items, inc, dec, remove, clear, totalPrice } = useCart();

  const handleCheckout = async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
      const tg = (window as any).Telegram?.WebApp;
      const userId = tg?.initDataUnsafe?.user?.id;
      
      if (!userId) {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const serverUrl = import.meta.env.VITE_SERVER_URL || 
        (import.meta.env.DEV 
          ? 'http://localhost:3001'  // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
          : 'https://pizzaback-one.vercel.app');  // –ü—Ä–æ–¥–∞–∫—à–µ–Ω –Ω–∞ Vercel
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
      const response = await fetch(`${serverUrl}/api/pay`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          userId,
          cart: {
            id: Date.now(),
            items,
            total: totalPrice
          }
        })
      });
      
      if (!response.ok) {
        const error = await response.json();
        if (error.error === 'EMPTY_CART') {
          throw new Error('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.');
        } else if (error.error === 'NO_USER') {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
        } else {
          throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      if (tg?.showAlert) {
        tg.showAlert('–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å.');
      } else {
        alert('–°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å.');
      }
      
      // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
      if (tg?.HapticFeedback?.notificationOccurred) {
        tg.HapticFeedback.notificationOccurred('success');
      }
      
      // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      clear();
    } catch (error) {
      console.error('Error during checkout:', error);
      
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error instanceof Error) {
        alert(`–û—à–∏–±–∫–∞: ${error.message}`);
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }
  };

  const checkOrderStatus = async () => {
    try {
      const tg = (window as any).Telegram?.WebApp;
      const userId = tg?.initDataUnsafe?.user?.id;

      if (!userId) {
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const serverUrl = import.meta.env.VITE_SERVER_URL || 
        (import.meta.env.DEV 
          ? 'http://localhost:3001'
          : 'https://pizzaback-one.vercel.app');

      const response = await fetch(`${serverUrl}/api/order-status?userId=${userId}`);
      
      if (response.ok) {
        const data = await response.json();
        if (data.orders && data.orders.length > 0) {
          const lastOrder = data.orders[data.orders.length - 1];
          if (lastOrder.status === 'paid') {
            alert(`‚úÖ –ó–∞–∫–∞–∑ #${lastOrder.orderId} –æ–ø–ª–∞—á–µ–Ω!\nüí∞ –°—É–º–º–∞: ${lastOrder.total} ${lastOrder.currency}\nüìÖ –î–∞—Ç–∞: ${new Date(lastOrder.paidAt).toLocaleString('ru-RU')}`);
          } else {
            alert(`‚è≥ –ó–∞–∫–∞–∑ #${lastOrder.orderId} –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã`);
          }
        } else {
          alert('üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
        }
      } else {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');
      }
    } catch (error) {
      console.error('Error checking order status:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');
    }
  };

  if (items.length === 0) {
    return (
      <div className="container">
        <div className="empty-cart-curved">
          <h2>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
          <p>–î–æ–±–∞–≤—å—Ç–µ –ø–∏—Ü—Ü—É –∏–∑ –º–µ–Ω—é</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container">
      <CurvedSection>
        {items.map((item) => {
          const itemId = item.kind === 'single' ? item.itemId : `${item.leftId}+${item.rightId}`;
          const isHalf = item.kind === 'half';
          
          return (
            <div key={itemId} className="cart-item-curved">
              <div className="info">
                <h3 className="name">
                  {item.name}
                  {isHalf && <span className="half-badge">¬Ω + ¬Ω</span>}
                </h3>
                <p className="price">{item.price.toLocaleString('ru-RU')} ‚ÇΩ</p>
              </div>
              
              <div className="controls">
                <button
                  className="icon-btn"
                  onClick={() => dec(itemId)}
                >
                  ‚àí
                </button>
                <span className="qty">{item.qty}</span>
                <button
                  className="icon-btn"
                  onClick={() => inc(itemId)}
                >
                  +
                </button>
                <button
                  className="icon-btn"
                  onClick={() => remove(itemId)}
                  style={{ color: 'var(--danger)' }}
                >
                  √ó
                </button>
              </div>
              
              <div className="total">
                {(item.price * item.qty).toLocaleString('ru-RU')} ‚ÇΩ
              </div>
            </div>
          );
        })}
      </CurvedSection>

      <div className="cart-summary-curved">
        <div className="total">
          <span>–ò—Ç–æ–≥–æ: {totalPrice.toLocaleString('ru-RU')} ‚ÇΩ</span>
        </div>
        
        <div className="actions">
          <button
            className="button button--clear"
            onClick={clear}
          >
            –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
          </button>
          <button
            className="button button--secondary"
            onClick={checkOrderStatus}
          >
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
          </button>
          <button
            className="button button--checkout"
            onClick={handleCheckout}
          >
            –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ
          </button>
        </div>
      </div>
    </div>
  );
};
